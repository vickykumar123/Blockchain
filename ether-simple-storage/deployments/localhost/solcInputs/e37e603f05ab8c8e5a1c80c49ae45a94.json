{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\r\n// Withdraw funds\r\n// Set a minimum funding value in USD\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror FundMe__NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConvertor for uint256;\r\n    address[] private funders;\r\n    mapping(address => uint256) private addressToAmountFunded;\r\n    uint256 public constant minimumUSD = 50 * 1e18; // 50 USD\r\n    address private immutable owner;\r\n    AggregatorV3Interface private priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) revert FundMe__NotOwner();\r\n        _; // do the rest of the code\r\n    }\r\n\r\n    // what happens if someone sends the contract ETH without calling the fund function\r\n    // we have receive and fallback function\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    function fund() public payable {\r\n        // Want to be able to set a minimu fund amount in USD\r\n        // 1. How do we send ETH to this contract?\r\n\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= minimumUSD,\r\n            \"Didn't send enough\"\r\n        ); // Should send more than or equal 1 ether\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n        // reset the array\r\n        funders = new address[](0);\r\n\r\n        // Ways to send ETH\r\n        // 1. transfer\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n        // 2. send\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"Send failed\");\r\n        // 3. call\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    function cheaperWithdraw() public payable onlyOwner {\r\n        address[] memory m_funders = funders; // copy the array to save gas\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < m_funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = m_funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n        // reset the array\r\n        funders = new address[](0);\r\n\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getFunder(uint256 index) public view returns (address) {\r\n        return funders[index];\r\n    }\r\n\r\n    function getAddressToAmountFunded(\r\n        address funder\r\n    ) public view returns (uint256) {\r\n        return addressToAmountFunded[funder];\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return priceFeed;\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConvertor {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        // ABI\r\n        // Address 0x694AA1769357215DE4FAC081bf1f309aDC325306 (get from the chainlink price feed)\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        // );\r\n        (, int price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n        // return uint256(5 * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 price = getPrice(priceFeed);\r\n        uint256 ethToUsd = (price * ethAmount) / 1e18;\r\n        return ethToUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}